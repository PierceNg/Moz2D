diff -Naur --exclude '.*' --exclude '*.pyc' --exclude '*.orig' --exclude '*.rej' gfx/2d/2D.h gfx/2d-patched/2D.h
--- gfx/2d/2D.h	2016-11-14 10:22:06.000000000 +0100
+++ gfx/2d-patched/2D.h	2017-11-30 15:11:19.000000000 +0100
@@ -1258,6 +1258,14 @@
   {
     MOZ_CRASH("GFX: InitWithGrContext");
   }
+
+  virtual bool InitWithNativeGrContext(GrContext* aGrContext,
+                                 const IntSize &aSize,
+                                 const IntSize &aRenderSize,
+                                 SurfaceFormat aFormat)
+  {
+    MOZ_CRASH("GFX: InitWithNativeGrContext");
+  }
 #endif
 
 protected:
@@ -1450,6 +1458,11 @@
     CreateDrawTargetSkiaWithGrContext(GrContext* aGrContext,
                                       const IntSize &aSize,
                                       SurfaceFormat aFormat);
+  static already_AddRefed<DrawTarget>
+    CreateDrawTargetSkiaWithNativeGrContext(GrContext* aGrContext,
+                                      const IntSize &aSize,
+                                      const IntSize &aRenderSize,
+                                      SurfaceFormat aFormat);
 #endif
 
   static void PurgeAllCaches();
diff -Naur --exclude '.*' --exclude '*.pyc' --exclude '*.orig' --exclude '*.rej' gfx/2d/DrawTargetSkia.cpp gfx/2d-patched/DrawTargetSkia.cpp
--- gfx/2d/DrawTargetSkia.cpp	2016-11-14 10:22:06.000000000 +0100
+++ gfx/2d-patched/DrawTargetSkia.cpp	2017-08-19 16:36:54.000000000 +0200
@@ -28,6 +28,8 @@
 
 #ifdef USE_SKIA_GPU
 #include "GLDefs.h"
+#include "skia/src/gpu/gl/GrGLDefines.h"
+#include "skia/src/gpu/gl/GrGLIRect.h"
 #include "skia/include/gpu/SkGr.h"
 #include "skia/include/gpu/GrContext.h"
 #include "skia/include/gpu/GrDrawContext.h"
@@ -1561,7 +1563,11 @@
   if (UsingSkiaGPU()) {
     // Try to create a GPU draw target first if we're currently using the GPU.
     // Mark the DT as cached so that shadow DTs, extracted subrects, and similar can be reused.
-    if (target->InitWithGrContext(mGrContext.get(), aSize, aFormat, true)) {
+    GrContext* aGrContext = nullptr;
+    if (mIsHeadless) {
+        aGrContext = mGrContext.get();
+    }
+    if (aGrContext && target->InitWithGrContext(aGrContext, aSize, aFormat, true)) {
       return target.forget();
     }
     // Otherwise, just fall back to a software draw target.
@@ -1838,6 +1844,50 @@
   return true;
 }
 
+bool
+DrawTargetSkia::InitWithNativeGrContext(GrContext* aGrContext,
+                                  const IntSize &aSize,
+                                  const IntSize &aRenderSize,
+                                  SurfaceFormat aFormat)
+{
+  MOZ_ASSERT(aGrContext, "null GrContext");
+
+  if (size_t(std::max(aSize.width, aSize.height)) > GetMaxSurfaceSize()) {
+    return false;
+  }
+
+  if (size_t(std::max(aRenderSize.width, aRenderSize.height)) > GetMaxSurfaceSize()) {
+    return false;
+  }
+
+
+  const GrGLInterface* aGrInterface = GrGLCreateNativeInterface();
+
+  GrBackendRenderTargetDesc desc;
+  desc.fWidth = aRenderSize.width;
+  desc.fHeight = aRenderSize.height;
+  desc.fConfig = kSkia8888_GrPixelConfig;
+  desc.fOrigin = kBottomLeft_GrSurfaceOrigin;
+  desc.fSampleCnt = 0;
+  desc.fStencilBits = 8;
+  GrGLint buffer;
+  GR_GL_GetIntegerv(aGrInterface, GR_GL_FRAMEBUFFER_BINDING, &buffer);
+  desc.fRenderTargetHandle = buffer;
+
+  SkSurfaceProps props(SkSurfaceProps::kLegacyFontHost_InitType);
+  mSurface = SkSurface::MakeFromBackendRenderTarget(aGrContext, desc, nullptr, &props);
+
+  if (!mSurface) {
+    return false;
+  }
+
+  mGrContext = sk_ref_sp(aGrContext);
+  mSize = aSize;
+  mFormat = aFormat;
+  mCanvas = sk_ref_sp(mSurface->getCanvas());
+  mIsHeadless = false;
+  return true;
+}
 #endif
 
 bool
diff -Naur --exclude '.*' --exclude '*.pyc' --exclude '*.orig' --exclude '*.rej' gfx/2d/DrawTargetSkia.h gfx/2d-patched/DrawTargetSkia.h
--- gfx/2d/DrawTargetSkia.h	2016-11-14 10:22:06.000000000 +0100
+++ gfx/2d-patched/DrawTargetSkia.h	2017-01-16 14:31:43.000000000 +0100
@@ -145,6 +145,10 @@
                       SurfaceFormat aFormat) override {
     return InitWithGrContext(aGrContext, aSize, aFormat, false);
   }
+  bool InitWithNativeGrContext(GrContext* aGrContext,
+                         const IntSize &aSize,
+                         const IntSize &aRenderSize,
+                         SurfaceFormat aFormat) override;
 
   already_AddRefed<SourceSurface> OptimizeGPUSourceSurface(SourceSurface *aSurface) const;
 #endif
@@ -193,6 +197,7 @@
 
 #ifdef USE_SKIA_GPU
   sk_sp<GrContext> mGrContext;
+  bool mIsHeadless = true;
 #endif
 
   IntSize mSize;
diff -Naur --exclude '.*' --exclude '*.pyc' --exclude '*.orig' --exclude '*.rej' gfx/2d/Factory.cpp gfx/2d-patched/Factory.cpp
--- gfx/2d/Factory.cpp	2016-11-14 10:22:06.000000000 +0100
+++ gfx/2d-patched/Factory.cpp	2017-01-16 14:31:43.000000000 +0100
@@ -705,6 +705,19 @@
   return newTarget.forget();
 }
 
+already_AddRefed<DrawTarget>
+Factory::CreateDrawTargetSkiaWithNativeGrContext(GrContext* aGrContext,
+                                           const IntSize &aSize,
+                                           const IntSize &aRenderSize,
+                                           SurfaceFormat aFormat)
+{
+  RefPtr<DrawTarget> newTarget = new DrawTargetSkia();
+  if (!newTarget->InitWithNativeGrContext(aGrContext, aSize, aRenderSize, aFormat)) {
+    return nullptr;
+  }
+  return newTarget.forget();
+}
+
 #endif // USE_SKIA_GPU
 
 #ifdef USE_SKIA
diff -Naur --exclude '.*' --exclude '*.pyc' --exclude '*.orig' --exclude '*.rej' gfx/2d/HelpersCairo.h gfx/2d-patched/HelpersCairo.h
--- gfx/2d/HelpersCairo.h	2016-11-14 10:22:06.000000000 +0100
+++ gfx/2d-patched/HelpersCairo.h	2017-11-30 14:26:42.000000000 +0100
@@ -70,6 +70,8 @@
       return CAIRO_OPERATOR_HSL_COLOR;
     case CompositionOp::OP_LUMINOSITY:
       return CAIRO_OPERATOR_HSL_LUMINOSITY;
+    case CompositionOp::OP_CLEAR:
+      return CAIRO_OPERATOR_CLEAR;
     case CompositionOp::OP_COUNT:
       break;
   }
diff -Naur --exclude '.*' --exclude '*.pyc' --exclude '*.orig' --exclude '*.rej' gfx/2d/HelpersD2D.h gfx/2d-patched/HelpersD2D.h
--- gfx/2d/HelpersD2D.h	2016-11-14 10:22:06.000000000 +0100
+++ gfx/2d-patched/HelpersD2D.h	2017-11-30 15:07:17.000000000 +0100
@@ -244,6 +244,8 @@
     return D2D1_COMPOSITE_MODE_DESTINATION_ATOP;
   case CompositionOp::OP_XOR:
     return D2D1_COMPOSITE_MODE_XOR;
+  case CompositionOp::OP_CLEAR:
+    return D2D1_COMPOSITE_MODE_DESTINATION_OUT; // clear is not supported by D2D1. Use the the closest operator
   default:
     return D2D1_COMPOSITE_MODE_SOURCE_OVER;
   }
diff -Naur --exclude '.*' --exclude '*.pyc' --exclude '*.orig' --exclude '*.rej' gfx/2d/HelpersSkia.h gfx/2d-patched/HelpersSkia.h
--- gfx/2d/HelpersSkia.h	2016-11-14 10:22:06.000000000 +0100
+++ gfx/2d-patched/HelpersSkia.h	2017-11-30 14:27:53.000000000 +0100
@@ -243,6 +243,8 @@
       return SkBlendMode::kColor;
     case CompositionOp::OP_LUMINOSITY:
       return SkBlendMode::kLuminosity;
+    case CompositionOp::OP_CLEAR:
+      return SkBlendMode::kClear;
     default:
       return SkBlendMode::kSrcOver;
   }
diff -Naur --exclude '.*' --exclude '*.pyc' --exclude '*.orig' --exclude '*.rej' gfx/2d/Types.h gfx/2d-patched/Types.h
--- gfx/2d/Types.h	2016-11-14 10:22:06.000000000 +0100
+++ gfx/2d-patched/Types.h	2017-11-30 14:26:07.000000000 +0100
@@ -208,6 +208,7 @@
   OP_SATURATION,
   OP_COLOR,
   OP_LUMINOSITY,
+  OP_CLEAR,
   OP_COUNT
 };
 
